{"ast":null,"code":"import { GET_DATA } from \"../../Home/actions\";\nimport data from \"../../../constants/data.json\";\nexport const IS_VALID_USER = \"IS_VALID_USER\";\nexport const SPINNER = \"SPINNER\";\nexport function authenticateUserAction(response) {\n  localStorage.setItem(\"isValid\", response);\n  return dispatch => {\n    dispatch({\n      type: IS_VALID_USER,\n      payload: response\n    });\n  };\n}\nexport const spinerStateUpdate = () => async dispatch => {\n  try {\n    var _response$data;\n\n    const newUrl = `${URL}/listusers`;\n    const response = await axios.get(newUrl, {\n      headers\n    });\n\n    if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.status) === \"success\") {\n      var _response$data2;\n\n      dispatch({\n        type: GET_LIST_USERS,\n        payload: response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.users\n      });\n    }\n\n    return response;\n  } catch (ex) {\n    return ex;\n  }\n};","map":{"version":3,"sources":["/Users/embibe/Downloads/Devza/src/modules/Login/actions/index.js"],"names":["GET_DATA","data","IS_VALID_USER","SPINNER","authenticateUserAction","response","localStorage","setItem","dispatch","type","payload","spinerStateUpdate","newUrl","URL","axios","get","headers","status","GET_LIST_USERS","users","ex"],"mappings":"AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,SAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AAC/CC,EAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCF,QAAhC;AACA,SAAQG,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,aADC;AAEPQ,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,MAAMM,iBAAiB,GAAG,MAAM,MAAOH,QAAP,IAAoB;AACzD,MAAI;AAAA;;AACF,UAAMI,MAAM,GAAI,GAAEC,GAAI,YAAtB;AACA,UAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACC,GAAN,CAAUH,MAAV,EAAkB;AAAEI,MAAAA;AAAF,KAAlB,CAAvB;;AACA,QAAI,CAAAX,QAAQ,SAAR,IAAAA,QAAQ,WAAR,8BAAAA,QAAQ,CAAEJ,IAAV,kEAAgBgB,MAAhB,MAA2B,SAA/B,EAA0C;AAAA;;AACxCT,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAES,cADC;AAEPR,QAAAA,OAAO,EAAEL,QAAF,aAAEA,QAAF,0CAAEA,QAAQ,CAAEJ,IAAZ,oDAAE,gBAAgBkB;AAFlB,OAAD,CAAR;AAID;;AACD,WAAOd,QAAP;AACD,GAVD,CAUE,OAAOe,EAAP,EAAW;AACX,WAAOA,EAAP;AACD;AACF,CAdM","sourcesContent":["import { GET_DATA } from \"../../Home/actions\";\nimport data from \"../../../constants/data.json\";\n\nexport const IS_VALID_USER = \"IS_VALID_USER\";\nexport const SPINNER = \"SPINNER\";\n\nexport function authenticateUserAction(response) {\n  localStorage.setItem(\"isValid\", response);\n  return (dispatch) => {\n    dispatch({\n      type: IS_VALID_USER,\n      payload: response,\n    });\n  };\n}\n\nexport const spinerStateUpdate = () => async (dispatch) => {\n  try {\n    const newUrl = `${URL}/listusers`;\n    const response = await axios.get(newUrl, { headers });\n    if (response?.data?.status === \"success\") {\n      dispatch({\n        type: GET_LIST_USERS,\n        payload: response?.data?.users,\n      });\n    }\n    return response;\n  } catch (ex) {\n    return ex;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}