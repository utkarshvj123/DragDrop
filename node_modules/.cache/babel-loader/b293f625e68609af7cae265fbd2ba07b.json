{"ast":null,"code":"var _jsxFileName = \"/Users/embibe/Downloads/Devza/src/modules/Home/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./style.scss\";\nimport { bindActionCreators } from \"redux\";\nimport { geStackExchanegeData, getListOfUsers, getTaskLists, createTask, taskRemoved, updateTask } from \"./actions\";\nimport NavBar from \"../../components/NavBar\";\nimport { authenticateUserAction } from \"../Login/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport DragDrop from \"../../components/DragDrop/index\";\nimport CreateTaskModal from \"./Components/CreateTaskModal\";\nimport { spinerStateUpdate } from \"../Login/actions\";\nconst Container = styled.div`\n  margin-top: 100px;\n`;\nconst TopWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0% 10%;\n  @media (max-width: 840px) {\n    padding: 0% 5%;\n  }\n  @media (max-width: 720px) {\n    display: block;\n  }\n`;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const [modalVisble, setModalVisibility] = useState(false);\n  const [completeJsonForDisplay, setCompleteJsonForDisplay] = useState({});\n  const [editModalVisible, setEditModalVisible] = useState(false); // const [currentType, setCurrentType] = useState(\"\");\n\n  const currentListOfUsers = useSelector(state => {\n    var _state$homeData;\n\n    return state === null || state === void 0 ? void 0 : (_state$homeData = state.homeData) === null || _state$homeData === void 0 ? void 0 : _state$homeData.listOfAllUsers;\n  });\n  const listOfAllTasks = useSelector(state => {\n    var _state$homeData2;\n\n    return state === null || state === void 0 ? void 0 : (_state$homeData2 = state.homeData) === null || _state$homeData2 === void 0 ? void 0 : _state$homeData2.listOfAllTasks;\n  });\n  useEffect(() => {\n    dispatch(spinerStateUpdate(true));\n    dispatch(getListOfUsers());\n    dispatch(getTaskLists()).then(res => dispatch(spinerStateUpdate(false)));\n  }, []);\n\n  const onChangeDateTime = date => {\n    setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n      due_date: date\n    });\n  };\n\n  const modalEventHandler = type => {\n    if (type === \"enable\") return setModalVisibility(!modalVisble);else {\n      if (completeJsonForDisplay.due_date && Object.keys(completeJsonForDisplay.priority).length > 0 && Object.keys(completeJsonForDisplay.assigned_to).length > 0 && completeJsonForDisplay.message) {\n        const jsonCreation = {\n          message: completeJsonForDisplay.message,\n          due_date: completeJsonForDisplay.due_date,\n          priority: completeJsonForDisplay.priority.id,\n          assigned_to: completeJsonForDisplay.assigned_to.id\n        };\n        dispatch(createTask(jsonCreation)).then(response => {\n          var _response$data;\n\n          if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.status) === \"success\") {\n            modalEventHandler(\"enable\");\n            setCompleteJsonForDisplay({});\n            dispatch(getTaskLists());\n            toastMessage(\"success\", \"Task successfully added.\");\n          }\n        });\n      } else {\n        toastMessage(\"error\", \"Please fill all detail\");\n      }\n    }\n  };\n\n  const toastMessage = (toastType, message) => {\n    toast[toastType](message, {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  };\n\n  const onChangeMessage = event => {\n    setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n      message: event.target.value\n    });\n  };\n\n  const hadleOnChangePriority = (selectedOption, type) => {\n    if (type === \"priority\") {\n      setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n        priority: selectedOption\n      });\n    } else {\n      setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n        assigned_to: selectedOption\n      });\n    }\n  };\n\n  const editModalSubmitHandler = (type, dataValue) => {\n    if (type === \"enable\") return setEditModalVisible(!editModalVisible);else {\n      if (dataValue.due_date && Object.keys(dataValue.priority).length > 0 && Object.keys(dataValue.assigned_to).length > 0 && dataValue.message) {\n        const jsonCreation = {\n          message: dataValue.message,\n          due_date: dataValue.due_date,\n          priority: dataValue.priority.id,\n          assigned_to: dataValue.assigned_to.id,\n          id: dataValue.id\n        };\n        dispatch(spinerStateUpdate(true));\n        dispatch(updateTask(jsonCreation)).then(response => {\n          dispatch(spinerStateUpdate(false));\n\n          if (response.data.status === \"success\") {\n            setEditModalVisible(!editModalVisible);\n            setCompleteJsonForDisplay({});\n            dispatch(getTaskLists());\n            toastMessage(\"success\", \"Priority updated successfully..\");\n          }\n        });\n      }\n    }\n  };\n\n  const handlingRemoval = removalValue => {\n    dispatch(taskRemoved(removalValue.id)).then(response => {\n      if (response.data.status === \"success\") {\n        dispatch(getTaskLists());\n        toastMessage(\"success\", \"Removed successfully.\");\n      }\n    });\n  };\n\n  const handlingEdit = value => {\n    setCompleteJsonForDisplay(value);\n    setEditModalVisible(!editModalVisible);\n  };\n\n  const handleDragDrop = json => {\n    dispatch(updateTask(json)).then(response => {\n      if (response.data.status === \"success\") {\n        dispatch(getTaskLists());\n        toastMessage(\"success\", \"Priority updated successfully..\");\n      }\n    });\n  };\n\n  console.log();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => modalEventHandler(\"enable\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, \"Create Task\"), /*#__PURE__*/React.createElement(DragDrop, {\n    handlingRemoval: handlingRemoval,\n    listOfAllTasks: listOfAllTasks,\n    handlingEdit: handlingEdit,\n    handleDragDrop: handleDragDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }), modalVisble && /*#__PURE__*/React.createElement(CreateTaskModal, {\n    modalVisble: modalVisble,\n    modalEventHandler: modalEventHandler,\n    completeJsonForDisplay: completeJsonForDisplay,\n    onChangeDateTime: onChangeDateTime,\n    onChangeMessage: onChangeMessage,\n    hadleOnChangePriority: hadleOnChangePriority,\n    currentListOfUsers: currentListOfUsers // currentType={\"\"}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }), editModalVisible && /*#__PURE__*/React.createElement(CreateTaskModal, {\n    modalVisble: editModalVisible,\n    modalEventHandler: editModalSubmitHandler,\n    completeJsonForDisplay: completeJsonForDisplay,\n    onChangeDateTime: onChangeDateTime,\n    onChangeMessage: onChangeMessage,\n    hadleOnChangePriority: hadleOnChangePriority,\n    currentListOfUsers: currentListOfUsers // currentType={\"\"}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }))); // }\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/embibe/Downloads/Devza/src/modules/Home/index.js"],"names":["React","useEffect","useState","styled","bindActionCreators","geStackExchanegeData","getListOfUsers","getTaskLists","createTask","taskRemoved","updateTask","NavBar","authenticateUserAction","useDispatch","useSelector","toast","DragDrop","CreateTaskModal","spinerStateUpdate","Container","div","TopWrapper","Home","dispatch","modalVisble","setModalVisibility","completeJsonForDisplay","setCompleteJsonForDisplay","editModalVisible","setEditModalVisible","currentListOfUsers","state","homeData","listOfAllUsers","listOfAllTasks","then","res","onChangeDateTime","date","due_date","modalEventHandler","type","Object","keys","priority","length","assigned_to","message","jsonCreation","id","response","data","status","toastMessage","toastType","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onChangeMessage","event","target","value","hadleOnChangePriority","selectedOption","editModalSubmitHandler","dataValue","handlingRemoval","removalValue","handlingEdit","handleDragDrop","json","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,cAAP;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,SACEC,oBADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,UANF,QAOO,WAPP;AAQA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,sBAAT,QAAuC,kBAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,MAAMC,SAAS,GAAGhB,MAAM,CAACiB,GAAI;AAC7B;AACA,CAFA;AAIA,MAAMC,UAAU,GAAGlB,MAAM,CAACiB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,MAAME,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,WAAD,EAAcC,kBAAd,IAAoCvB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACwB,sBAAD,EAAyBC,yBAAzB,IAAsDzB,QAAQ,CAAC,EAAD,CAApE;AACA,QAAM,CAAC0B,gBAAD,EAAmBC,mBAAnB,IAA0C3B,QAAQ,CAAC,KAAD,CAAxD,CAJiB,CAKjB;;AAEA,QAAM4B,kBAAkB,GAAGhB,WAAW,CACnCiB,KAAD;AAAA;;AAAA,WAAWA,KAAX,aAAWA,KAAX,0CAAWA,KAAK,CAAEC,QAAlB,oDAAW,gBAAiBC,cAA5B;AAAA,GADoC,CAAtC;AAGA,QAAMC,cAAc,GAAGpB,WAAW,CAC/BiB,KAAD;AAAA;;AAAA,WAAWA,KAAX,aAAWA,KAAX,2CAAWA,KAAK,CAAEC,QAAlB,qDAAW,iBAAiBE,cAA5B;AAAA,GADgC,CAAlC;AAGAjC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,QAAQ,CAACL,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACAK,IAAAA,QAAQ,CAACjB,cAAc,EAAf,CAAR;AACAiB,IAAAA,QAAQ,CAAChB,YAAY,EAAb,CAAR,CAAyB4B,IAAzB,CAA+BC,GAAD,IAASb,QAAQ,CAACL,iBAAiB,CAAC,KAAD,CAAlB,CAA/C;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMmB,gBAAgB,GAAIC,IAAD,IAAU;AACjCX,IAAAA,yBAAyB,CAAC,EACxB,GAAGD,sBADqB;AAExBa,MAAAA,QAAQ,EAAED;AAFc,KAAD,CAAzB;AAID,GALD;;AAOA,QAAME,iBAAiB,GAAIC,IAAD,IAAU;AAClC,QAAIA,IAAI,KAAK,QAAb,EAAuB,OAAOhB,kBAAkB,CAAC,CAACD,WAAF,CAAzB,CAAvB,KACK;AACH,UACEE,sBAAsB,CAACa,QAAvB,IACAG,MAAM,CAACC,IAAP,CAAYjB,sBAAsB,CAACkB,QAAnC,EAA6CC,MAA7C,GAAsD,CADtD,IAEAH,MAAM,CAACC,IAAP,CAAYjB,sBAAsB,CAACoB,WAAnC,EAAgDD,MAAhD,GAAyD,CAFzD,IAGAnB,sBAAsB,CAACqB,OAJzB,EAKE;AACA,cAAMC,YAAY,GAAG;AACnBD,UAAAA,OAAO,EAAErB,sBAAsB,CAACqB,OADb;AAEnBR,UAAAA,QAAQ,EAAEb,sBAAsB,CAACa,QAFd;AAGnBK,UAAAA,QAAQ,EAAElB,sBAAsB,CAACkB,QAAvB,CAAgCK,EAHvB;AAInBH,UAAAA,WAAW,EAAEpB,sBAAsB,CAACoB,WAAvB,CAAmCG;AAJ7B,SAArB;AAMA1B,QAAAA,QAAQ,CAACf,UAAU,CAACwC,YAAD,CAAX,CAAR,CAAmCb,IAAnC,CAAyCe,QAAD,IAAc;AAAA;;AACpD,cAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,8BAAAA,QAAQ,CAAEC,IAAV,kEAAgBC,MAAhB,MAA2B,SAA/B,EAA0C;AACxCZ,YAAAA,iBAAiB,CAAC,QAAD,CAAjB;AACAb,YAAAA,yBAAyB,CAAC,EAAD,CAAzB;AACAJ,YAAAA,QAAQ,CAAChB,YAAY,EAAb,CAAR;AACA8C,YAAAA,YAAY,CAAC,SAAD,EAAY,0BAAZ,CAAZ;AACD;AACF,SAPD;AAQD,OApBD,MAoBO;AACLA,QAAAA,YAAY,CAAC,OAAD,EAAU,wBAAV,CAAZ;AACD;AACF;AACF,GA3BD;;AA4BA,QAAMA,YAAY,GAAG,CAACC,SAAD,EAAYP,OAAZ,KAAwB;AAC3ChC,IAAAA,KAAK,CAACuC,SAAD,CAAL,CAAiBP,OAAjB,EAA0B;AACxBQ,MAAAA,QAAQ,EAAE,WADc;AAExBC,MAAAA,SAAS,EAAE,IAFa;AAGxBC,MAAAA,eAAe,EAAE,IAHO;AAIxBC,MAAAA,YAAY,EAAE,IAJU;AAKxBC,MAAAA,YAAY,EAAE,IALU;AAMxBC,MAAAA,SAAS,EAAE,IANa;AAOxBC,MAAAA,QAAQ,EAAEC;AAPc,KAA1B;AASD,GAVD;;AAWA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCrC,IAAAA,yBAAyB,CAAC,EACxB,GAAGD,sBADqB;AAExBqB,MAAAA,OAAO,EAAEiB,KAAK,CAACC,MAAN,CAAaC;AAFE,KAAD,CAAzB;AAID,GALD;;AAOA,QAAMC,qBAAqB,GAAG,CAACC,cAAD,EAAiB3B,IAAjB,KAA0B;AACtD,QAAIA,IAAI,KAAK,UAAb,EAAyB;AACvBd,MAAAA,yBAAyB,CAAC,EACxB,GAAGD,sBADqB;AAExBkB,QAAAA,QAAQ,EAAEwB;AAFc,OAAD,CAAzB;AAID,KALD,MAKO;AACLzC,MAAAA,yBAAyB,CAAC,EACxB,GAAGD,sBADqB;AAExBoB,QAAAA,WAAW,EAAEsB;AAFW,OAAD,CAAzB;AAID;AACF,GAZD;;AAcA,QAAMC,sBAAsB,GAAG,CAAC5B,IAAD,EAAO6B,SAAP,KAAqB;AAClD,QAAI7B,IAAI,KAAK,QAAb,EAAuB,OAAOZ,mBAAmB,CAAC,CAACD,gBAAF,CAA1B,CAAvB,KACK;AACH,UACE0C,SAAS,CAAC/B,QAAV,IACAG,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAAC1B,QAAtB,EAAgCC,MAAhC,GAAyC,CADzC,IAEAH,MAAM,CAACC,IAAP,CAAY2B,SAAS,CAACxB,WAAtB,EAAmCD,MAAnC,GAA4C,CAF5C,IAGAyB,SAAS,CAACvB,OAJZ,EAKE;AACA,cAAMC,YAAY,GAAG;AACnBD,UAAAA,OAAO,EAAEuB,SAAS,CAACvB,OADA;AAEnBR,UAAAA,QAAQ,EAAE+B,SAAS,CAAC/B,QAFD;AAGnBK,UAAAA,QAAQ,EAAE0B,SAAS,CAAC1B,QAAV,CAAmBK,EAHV;AAInBH,UAAAA,WAAW,EAAEwB,SAAS,CAACxB,WAAV,CAAsBG,EAJhB;AAKnBA,UAAAA,EAAE,EAAEqB,SAAS,CAACrB;AALK,SAArB;AAOA1B,QAAAA,QAAQ,CAACL,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AAEAK,QAAAA,QAAQ,CAACb,UAAU,CAACsC,YAAD,CAAX,CAAR,CAAmCb,IAAnC,CAAyCe,QAAD,IAAc;AACpD3B,UAAAA,QAAQ,CAACL,iBAAiB,CAAC,KAAD,CAAlB,CAAR;;AAEA,cAAIgC,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,SAA7B,EAAwC;AACtCvB,YAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACAD,YAAAA,yBAAyB,CAAC,EAAD,CAAzB;AACAJ,YAAAA,QAAQ,CAAChB,YAAY,EAAb,CAAR;AACA8C,YAAAA,YAAY,CAAC,SAAD,EAAY,iCAAZ,CAAZ;AACD;AACF,SATD;AAUD;AACF;AACF,GA9BD;;AAgCA,QAAMkB,eAAe,GAAIC,YAAD,IAAkB;AACxCjD,IAAAA,QAAQ,CAACd,WAAW,CAAC+D,YAAY,CAACvB,EAAd,CAAZ,CAAR,CAAuCd,IAAvC,CAA6Ce,QAAD,IAAc;AACxD,UAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,SAA7B,EAAwC;AACtC7B,QAAAA,QAAQ,CAAChB,YAAY,EAAb,CAAR;AACA8C,QAAAA,YAAY,CAAC,SAAD,EAAY,uBAAZ,CAAZ;AACD;AACF,KALD;AAMD,GAPD;;AASA,QAAMoB,YAAY,GAAIP,KAAD,IAAW;AAC9BvC,IAAAA,yBAAyB,CAACuC,KAAD,CAAzB;AACArC,IAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACD,GAHD;;AAIA,QAAM8C,cAAc,GAAIC,IAAD,IAAU;AAC/BpD,IAAAA,QAAQ,CAACb,UAAU,CAACiE,IAAD,CAAX,CAAR,CAA2BxC,IAA3B,CAAiCe,QAAD,IAAc;AAC5C,UAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,SAA7B,EAAwC;AACtC7B,QAAAA,QAAQ,CAAChB,YAAY,EAAb,CAAR;AACA8C,QAAAA,YAAY,CAAC,SAAD,EAAY,iCAAZ,CAAZ;AACD;AACF,KALD;AAMD,GAPD;;AASAuB,EAAAA,OAAO,CAACC,GAAR;AACA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,OAAO,EAAE,MAAMrC,iBAAiB,CAAC,QAAD,CAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAQE,oBAAC,QAAD;AACE,IAAA,eAAe,EAAE+B,eADnB;AAEE,IAAA,cAAc,EAAErC,cAFlB;AAGE,IAAA,YAAY,EAAEuC,YAHhB;AAIE,IAAA,cAAc,EAAEC,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAcGlD,WAAW,iBACV,oBAAC,eAAD;AACE,IAAA,WAAW,EAAEA,WADf;AAEE,IAAA,iBAAiB,EAAEgB,iBAFrB;AAGE,IAAA,sBAAsB,EAAEd,sBAH1B;AAIE,IAAA,gBAAgB,EAAEW,gBAJpB;AAKE,IAAA,eAAe,EAAE0B,eALnB;AAME,IAAA,qBAAqB,EAAEI,qBANzB;AAOE,IAAA,kBAAkB,EAAErC,kBAPtB,CAQE;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EA0BGF,gBAAgB,iBACf,oBAAC,eAAD;AACE,IAAA,WAAW,EAAEA,gBADf;AAEE,IAAA,iBAAiB,EAAEyC,sBAFrB;AAGE,IAAA,sBAAsB,EAAE3C,sBAH1B;AAIE,IAAA,gBAAgB,EAAEW,gBAJpB;AAKE,IAAA,eAAe,EAAE0B,eALnB;AAME,IAAA,qBAAqB,EAAEI,qBANzB;AAOE,IAAA,kBAAkB,EAAErC,kBAPtB,CAQE;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BJ,CADF,CADF,CA7IiB,CAwLjB;AACD,CAzLD;;AA2LA,eAAeR,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./style.scss\";\nimport { bindActionCreators } from \"redux\";\n\nimport {\n  geStackExchanegeData,\n  getListOfUsers,\n  getTaskLists,\n  createTask,\n  taskRemoved,\n  updateTask,\n} from \"./actions\";\nimport NavBar from \"../../components/NavBar\";\nimport { authenticateUserAction } from \"../Login/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport DragDrop from \"../../components/DragDrop/index\";\nimport CreateTaskModal from \"./Components/CreateTaskModal\";\nimport { spinerStateUpdate } from \"../Login/actions\";\n\nconst Container = styled.div`\n  margin-top: 100px;\n`;\n\nconst TopWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0% 10%;\n  @media (max-width: 840px) {\n    padding: 0% 5%;\n  }\n  @media (max-width: 720px) {\n    display: block;\n  }\n`;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const [modalVisble, setModalVisibility] = useState(false);\n  const [completeJsonForDisplay, setCompleteJsonForDisplay] = useState({});\n  const [editModalVisible, setEditModalVisible] = useState(false);\n  // const [currentType, setCurrentType] = useState(\"\");\n\n  const currentListOfUsers = useSelector(\n    (state) => state?.homeData?.listOfAllUsers\n  );\n  const listOfAllTasks = useSelector(\n    (state) => state?.homeData?.listOfAllTasks\n  );\n  useEffect(() => {\n    dispatch(spinerStateUpdate(true));\n    dispatch(getListOfUsers());\n    dispatch(getTaskLists()).then((res) => dispatch(spinerStateUpdate(false)));\n  }, []);\n\n  const onChangeDateTime = (date) => {\n    setCompleteJsonForDisplay({\n      ...completeJsonForDisplay,\n      due_date: date,\n    });\n  };\n\n  const modalEventHandler = (type) => {\n    if (type === \"enable\") return setModalVisibility(!modalVisble);\n    else {\n      if (\n        completeJsonForDisplay.due_date &&\n        Object.keys(completeJsonForDisplay.priority).length > 0 &&\n        Object.keys(completeJsonForDisplay.assigned_to).length > 0 &&\n        completeJsonForDisplay.message\n      ) {\n        const jsonCreation = {\n          message: completeJsonForDisplay.message,\n          due_date: completeJsonForDisplay.due_date,\n          priority: completeJsonForDisplay.priority.id,\n          assigned_to: completeJsonForDisplay.assigned_to.id,\n        };\n        dispatch(createTask(jsonCreation)).then((response) => {\n          if (response?.data?.status === \"success\") {\n            modalEventHandler(\"enable\");\n            setCompleteJsonForDisplay({});\n            dispatch(getTaskLists());\n            toastMessage(\"success\", \"Task successfully added.\");\n          }\n        });\n      } else {\n        toastMessage(\"error\", \"Please fill all detail\");\n      }\n    }\n  };\n  const toastMessage = (toastType, message) => {\n    toast[toastType](message, {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n  const onChangeMessage = (event) => {\n    setCompleteJsonForDisplay({\n      ...completeJsonForDisplay,\n      message: event.target.value,\n    });\n  };\n\n  const hadleOnChangePriority = (selectedOption, type) => {\n    if (type === \"priority\") {\n      setCompleteJsonForDisplay({\n        ...completeJsonForDisplay,\n        priority: selectedOption,\n      });\n    } else {\n      setCompleteJsonForDisplay({\n        ...completeJsonForDisplay,\n        assigned_to: selectedOption,\n      });\n    }\n  };\n\n  const editModalSubmitHandler = (type, dataValue) => {\n    if (type === \"enable\") return setEditModalVisible(!editModalVisible);\n    else {\n      if (\n        dataValue.due_date &&\n        Object.keys(dataValue.priority).length > 0 &&\n        Object.keys(dataValue.assigned_to).length > 0 &&\n        dataValue.message\n      ) {\n        const jsonCreation = {\n          message: dataValue.message,\n          due_date: dataValue.due_date,\n          priority: dataValue.priority.id,\n          assigned_to: dataValue.assigned_to.id,\n          id: dataValue.id,\n        };\n        dispatch(spinerStateUpdate(true));\n\n        dispatch(updateTask(jsonCreation)).then((response) => {\n          dispatch(spinerStateUpdate(false));\n\n          if (response.data.status === \"success\") {\n            setEditModalVisible(!editModalVisible);\n            setCompleteJsonForDisplay({});\n            dispatch(getTaskLists());\n            toastMessage(\"success\", \"Priority updated successfully..\");\n          }\n        });\n      }\n    }\n  };\n\n  const handlingRemoval = (removalValue) => {\n    dispatch(taskRemoved(removalValue.id)).then((response) => {\n      if (response.data.status === \"success\") {\n        dispatch(getTaskLists());\n        toastMessage(\"success\", \"Removed successfully.\");\n      }\n    });\n  };\n\n  const handlingEdit = (value) => {\n    setCompleteJsonForDisplay(value);\n    setEditModalVisible(!editModalVisible);\n  };\n  const handleDragDrop = (json) => {\n    dispatch(updateTask(json)).then((response) => {\n      if (response.data.status === \"success\") {\n        dispatch(getTaskLists());\n        toastMessage(\"success\", \"Priority updated successfully..\");\n      }\n    });\n  };\n\n  console.log();\n  return (\n    <React.Fragment>\n      <Container>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => modalEventHandler(\"enable\")}\n        >\n          Create Task\n        </button>\n\n        <DragDrop\n          handlingRemoval={handlingRemoval}\n          listOfAllTasks={listOfAllTasks}\n          handlingEdit={handlingEdit}\n          handleDragDrop={handleDragDrop}\n        />\n        {modalVisble && (\n          <CreateTaskModal\n            modalVisble={modalVisble}\n            modalEventHandler={modalEventHandler}\n            completeJsonForDisplay={completeJsonForDisplay}\n            onChangeDateTime={onChangeDateTime}\n            onChangeMessage={onChangeMessage}\n            hadleOnChangePriority={hadleOnChangePriority}\n            currentListOfUsers={currentListOfUsers}\n            // currentType={\"\"}\n          />\n        )}\n        {editModalVisible && (\n          <CreateTaskModal\n            modalVisble={editModalVisible}\n            modalEventHandler={editModalSubmitHandler}\n            completeJsonForDisplay={completeJsonForDisplay}\n            onChangeDateTime={onChangeDateTime}\n            onChangeMessage={onChangeMessage}\n            hadleOnChangePriority={hadleOnChangePriority}\n            currentListOfUsers={currentListOfUsers}\n            // currentType={\"\"}\n          />\n        )}\n      </Container>\n    </React.Fragment>\n  );\n  // }\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}