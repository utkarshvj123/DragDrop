{"ast":null,"code":"var _jsxFileName = \"/Users/embibe/Downloads/Devza/src/components/DragDrop/index.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as Icon from \"react-bootstrap-icons\";\nimport { creatingRequiredDataFormat } from \"../../constants/globalFunction\"; // fake data generator\n\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}`,\n  content: `item ${k + offset}`\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\n\n\nconst move = (source, destination, droppableSource, droppableDestination, findedNotAvailableName, findedNotAvailable) => {\n  let priorityTypeKey = \"\";\n\n  if (droppableDestination.droppableId === \"priorityLow\") {\n    priorityTypeKey = \"1\";\n  } else if (droppableDestination.droppableId === \"priorityMedium\") {\n    priorityTypeKey = \"2\";\n  } else if (droppableDestination.droppableId === \"priorityHigh\") {\n    priorityTypeKey = \"3\";\n  }\n\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  debugger; // const newerDestinationWithNewerPriority = {\n  //   ...destClone,\n  //   priority: priorityTypeKey,\n  // };\n\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  result[findedNotAvailableName] = findedNotAvailable;\n  debugger;\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass DragDrop extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: [],\n      selected: [],\n      otherSelected: [],\n      completeData: []\n    };\n    this.id2List = {\n      priorityLow: \"items\",\n      priorityMedium: \"selected\",\n      priorityHigh: \"otherSelected\"\n    };\n    this.setOfAllData = [\"priorityLow\", \"priorityMedium\", \"priorityHigh\"];\n\n    this.getList = id => this.state[this.id2List[id]];\n\n    this.onDragEnd = result => {\n      const {\n        source,\n        destination\n      } = result; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        const items = reorder(this.getList(source.droppableId), source.index, destination.index);\n        let state = {\n          items\n        };\n\n        if (source.droppableId === \"priorityMedium\") {\n          state = {\n            selected: items\n          };\n        } else if (source.droppableId === \"priorityHigh\") {\n          state = {\n            otherSelected: items\n          };\n        }\n\n        this.setState(state);\n      } else {\n        let setofCurrentSelected = [];\n        setofCurrentSelected.push(source.droppableId);\n        setofCurrentSelected.push(destination.droppableId);\n        let findingNotAvaiable = this.setOfAllData.filter(f => !setofCurrentSelected.includes(f));\n        const result = move(this.getList(source.droppableId), this.getList(destination.droppableId), source, destination, findingNotAvaiable[0], this.state[this.id2List[findingNotAvaiable[0]]]);\n        this.setState({\n          items: result.priorityLow,\n          selected: result.priorityMedium,\n          otherSelected: result.priorityHigh\n        });\n      }\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(state.completeData, \"......state.....\", props.listOfAllTasks);\n\n    if (props.listOfAllTasks.length > 0 && props.listOfAllTasks.length && props.listOfAllTasks.length !== state.completeData.length) {\n      console.log(creatingRequiredDataFormat(props.listOfAllTasks), \"tasks to display\");\n      const filteredData = creatingRequiredDataFormat(props.listOfAllTasks);\n      console.log(creatingRequiredDataFormat(props.listOfAllTasks));\n      return {\n        completeData: props.listOfAllTasks,\n        items: filteredData.low,\n        selected: filteredData.medium,\n        otherSelected: filteredData.high\n      };\n    } else return { ...state\n    };\n  }\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    console.log(this.state, \".....stateprnting\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"priorityLow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, \"Low Priority\"), this.state.items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      className: \"draggable-component\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      onClick: () => this.props.handlingRemoval(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArchiveFill, {\n      color: \"red\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 27\n      }\n    })), item.message, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bottom-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArrowUp, {\n      color: \"green\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit-button\",\n      onClick: () => this.props.handlingEdit(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.PencilSquare, {\n      color: \"black\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }\n    })))))), provided.placeholder)), /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"priorityMedium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, \"Medium Priority\"), this.state.selected.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"draggable-component\",\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      onClick: () => this.props.handlingRemoval(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArchiveFill, {\n      color: \"red\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 27\n      }\n    })), item.message, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bottom-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArrowUp, {\n      color: \"#fd7e14\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"circular-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 31\n      }\n    }, item.assigned_name))))))), provided.placeholder)), /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"priorityHigh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: provided.innerRef,\n      style: getListStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }, \"High Priority\"), this.state.otherSelected.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 19\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"draggable-component\",\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      onClick: () => this.props.handlingRemoval(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArchiveFill, {\n      color: \"red\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 27\n      }\n    })), item.message, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bottom-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.ArrowUp, {\n      color: \"red\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cross-button\",\n      onClick: () => this.props.handlingEdit(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.PencilSquare, {\n      color: \"black\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 29\n      }\n    })))))), provided.placeholder))));\n  }\n\n}\n\nexport default DragDrop;","map":{"version":3,"sources":["/Users/embibe/Downloads/Devza/src/components/DragDrop/index.js"],"names":["React","Component","ReactDOM","DragDropContext","Droppable","Draggable","Icon","creatingRequiredDataFormat","getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","removed","splice","move","source","destination","droppableSource","droppableDestination","findedNotAvailableName","findedNotAvailable","priorityTypeKey","droppableId","sourceClone","destClone","index","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","DragDrop","state","items","selected","otherSelected","completeData","id2List","priorityLow","priorityMedium","priorityHigh","setOfAllData","getList","onDragEnd","setState","setofCurrentSelected","push","findingNotAvaiable","filter","f","includes","getDerivedStateFromProps","props","console","log","listOfAllTasks","filteredData","low","medium","high","render","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","handlingRemoval","message","handlingEdit","placeholder","assigned_name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as Icon from \"react-bootstrap-icons\";\nimport { creatingRequiredDataFormat } from \"../../constants/globalFunction\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (\n  source,\n  destination,\n  droppableSource,\n  droppableDestination,\n  findedNotAvailableName,\n  findedNotAvailable\n) => {\n  let priorityTypeKey = \"\";\n  if (droppableDestination.droppableId === \"priorityLow\") {\n    priorityTypeKey = \"1\";\n  } else if (droppableDestination.droppableId === \"priorityMedium\") {\n    priorityTypeKey = \"2\";\n  } else if (droppableDestination.droppableId === \"priorityHigh\") {\n    priorityTypeKey = \"3\";\n  }\n  const sourceClone = Array.from(source);\n\n  const destClone = Array.from(destination);\n  debugger;\n  // const newerDestinationWithNewerPriority = {\n  //   ...destClone,\n  //   priority: priorityTypeKey,\n  // };\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  result[findedNotAvailableName] = findedNotAvailable;\n  debugger;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250,\n});\n\nclass DragDrop extends Component {\n  state = {\n    items: [],\n    selected: [],\n    otherSelected: [],\n    completeData: [],\n  };\n  static getDerivedStateFromProps(props, state) {\n    console.log(state.completeData, \"......state.....\", props.listOfAllTasks);\n    if (\n      props.listOfAllTasks.length > 0 &&\n      props.listOfAllTasks.length &&\n      props.listOfAllTasks.length !== state.completeData.length\n    ) {\n      console.log(\n        creatingRequiredDataFormat(props.listOfAllTasks),\n        \"tasks to display\"\n      );\n\n      const filteredData = creatingRequiredDataFormat(props.listOfAllTasks);\n      console.log(creatingRequiredDataFormat(props.listOfAllTasks));\n\n      return {\n        completeData: props.listOfAllTasks,\n        items: filteredData.low,\n        selected: filteredData.medium,\n        otherSelected: filteredData.high,\n      };\n    } else return { ...state };\n  }\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    priorityLow: \"items\",\n    priorityMedium: \"selected\",\n    priorityHigh: \"otherSelected\",\n  };\n\n  setOfAllData = [\"priorityLow\", \"priorityMedium\", \"priorityHigh\"];\n  getList = (id) => this.state[this.id2List[id]];\n\n  onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"priorityMedium\") {\n        state = { selected: items };\n      } else if (source.droppableId === \"priorityHigh\") {\n        state = { otherSelected: items };\n      }\n\n      this.setState(state);\n    } else {\n      let setofCurrentSelected = [];\n      setofCurrentSelected.push(source.droppableId);\n      setofCurrentSelected.push(destination.droppableId);\n      let findingNotAvaiable = this.setOfAllData.filter(\n        (f) => !setofCurrentSelected.includes(f)\n      );\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination,\n        findingNotAvaiable[0],\n        this.state[this.id2List[findingNotAvaiable[0]]]\n      );\n\n      this.setState({\n        items: result.priorityLow,\n        selected: result.priorityMedium,\n        otherSelected: result.priorityHigh,\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    console.log(this.state, \".....stateprnting\");\n    return (\n      <div className=\"d-flex\">\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"priorityLow\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                <div className=\"heading\">Low Priority</div>\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                        className=\"draggable-component\"\n                      >\n                        <div\n                          className=\"cross-button\"\n                          onClick={() => this.props.handlingRemoval(item)}\n                        >\n                          <Icon.ArchiveFill color=\"red\" size={20} />\n                        </div>\n                        {item.message}\n                        <div className=\"bottom-wrapper\">\n                          <div className=\"cross-button\">\n                            <Icon.ArrowUp color=\"green\" size={20} />\n                          </div>\n                          <div\n                            className=\"edit-button\"\n                            onClick={() => this.props.handlingEdit(item)}\n                          >\n                            <Icon.PencilSquare color=\"black\" size={20} />\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable droppableId=\"priorityMedium\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                <div className=\"heading\">Medium Priority</div>\n\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        className=\"draggable-component\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <div\n                          className=\"cross-button\"\n                          onClick={() => this.props.handlingRemoval(item)}\n                        >\n                          <Icon.ArchiveFill color=\"red\" size={20} />\n                        </div>\n                        {item.message}\n                        <div className=\"bottom-wrapper\">\n                          <div className=\"cross-button\">\n                            <Icon.ArrowUp color=\"#fd7e14\" size={20} />\n                          </div>\n                          <div>\n                            <div className=\"circular-name\">\n                              <span className=\"text-name\">\n                                {item.assigned_name}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n\n          <Droppable droppableId=\"priorityHigh\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                <div className=\"heading\">High Priority</div>\n                {this.state.otherSelected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        className=\"draggable-component\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <div\n                          className=\"cross-button\"\n                          onClick={() => this.props.handlingRemoval(item)}\n                        >\n                          <Icon.ArchiveFill color=\"red\" size={20} />\n                        </div>\n                        {item.message}\n                        <div className=\"bottom-wrapper\">\n                          <div className=\"cross-button\">\n                            <Icon.ArrowUp color=\"red\" size={20} />\n                          </div>\n\n                          <div\n                            className=\"cross-button\"\n                            onClick={() => this.props.handlingEdit(item)}\n                          >\n                            <Icon.PencilSquare color=\"black\" size={20} />\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\nexport default DragDrop;\n"]},"metadata":{},"sourceType":"module"}