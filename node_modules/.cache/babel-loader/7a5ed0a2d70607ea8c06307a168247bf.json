{"ast":null,"code":"export const requiredDateTimeFormat = (date, timeStatus) => {\n  const newFormat = {\n    mm: date.getMonth() + 1,\n    dd: date.getDate(),\n    yy: date.getFullYear().toString().slice(-2),\n    yyyy: date.getFullYear()\n  };\n  const qwerty = new Date(date).toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\"\n  });\n  const newFormat2 = `${newFormat.yyyy}-${newFormat.mm > 9 ? newFormat.mm : \"0\" + newFormat.mm}-${newFormat.dd > 9 ? newFormat.dd : \"0\" + newFormat.dd} ${qwerty}`;\n  return newFormat2;\n};\nexport const creatingRequiredDataFormat = array => {\n  let array1 = [];\n  let array2 = [];\n  let array3 = [];\n  array.filter(obj => {\n    const newDate = new Date(new Date(obj.due_date));\n\n    if (obj.priority === \"1\") {\n      debugger;\n      array1.push({ ...obj,\n        due_date: new Date(obj.due_date)\n      });\n    } else if (obj.priority === \"2\") {\n      array2.push({ ...obj,\n        due_date: new Date(obj.due_date)\n      });\n    } else if (obj.priority === \"3\") {\n      array3.push({ ...obj,\n        due_date: new Date(obj.due_date)\n      });\n    }\n  });\n  return {\n    low: array1,\n    medium: array2,\n    high: array3\n  };\n};\nexport const requiredData = array => {\n  array.forEach(object => {\n    if (object.name || object.count) {\n      object[\"label\"] = capitalizeFirstLetter(object.name);\n      object[\"value\"] = object.count;\n    }\n  });\n  return {\n    type: \"column2d\",\n    width: 800,\n    height: 400,\n    dataFormat: \"json\",\n    dataSource: {\n      chart: {\n        caption: \"Stack Exchange\",\n        // subCaption: \"\",\n        xAxisName: \"Language\",\n        yAxisName: \"Counts\",\n        numberSuffix: \"K\",\n        theme: \"fusion\"\n      },\n      data: array\n    }\n  };\n};\n\nfunction capitalizeFirstLetter(string) {\n  var b = string.split(\"-\");\n  let newString;\n\n  if (b === -1) {\n    newString = string;\n  } else {\n    let c = b.join(\" \");\n    newString = c;\n  }\n\n  return newString.charAt(0).toUpperCase() + newString.slice(1);\n}","map":{"version":3,"sources":["/Users/embibe/Downloads/Devza/src/constants/globalFunction.js"],"names":["requiredDateTimeFormat","date","timeStatus","newFormat","mm","getMonth","dd","getDate","yy","getFullYear","toString","slice","yyyy","qwerty","Date","toLocaleTimeString","hour12","hour","minute","second","newFormat2","creatingRequiredDataFormat","array","array1","array2","array3","filter","obj","newDate","due_date","priority","push","low","medium","high","requiredData","forEach","object","name","count","capitalizeFirstLetter","type","width","height","dataFormat","dataSource","chart","caption","xAxisName","yAxisName","numberSuffix","theme","data","string","b","split","newString","c","join","charAt","toUpperCase"],"mappings":"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","sourcesContent":["export const requiredDateTimeFormat = (date, timeStatus) => {\n  const newFormat = {\n    mm: date.getMonth() + 1,\n    dd: date.getDate(),\n    yy: date.getFullYear().toString().slice(-2),\n    yyyy: date.getFullYear(),\n  };\n  const qwerty = new Date(date).toLocaleTimeString(\"en-US\", {\n    hour12: false,\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n  });\n  const newFormat2 = `${newFormat.yyyy}-${\n    newFormat.mm > 9 ? newFormat.mm : \"0\" + newFormat.mm\n  }-${newFormat.dd > 9 ? newFormat.dd : \"0\" + newFormat.dd} ${qwerty}`;\n  return newFormat2;\n};\n\nexport const creatingRequiredDataFormat = (array) => {\n  let array1 = [];\n  let array2 = [];\n  let array3 = [];\n\n  array.filter((obj) => {\n    const newDate = new Date(new Date(obj.due_date));\n    if (obj.priority === \"1\") {\n      debugger;\n      array1.push({ ...obj, due_date: new Date(obj.due_date) });\n    } else if (obj.priority === \"2\") {\n      array2.push({ ...obj, due_date: new Date(obj.due_date) });\n    } else if (obj.priority === \"3\") {\n      array3.push({ ...obj, due_date: new Date(obj.due_date) });\n    }\n  });\n  return {\n    low: array1,\n    medium: array2,\n    high: array3,\n  };\n};\nexport const requiredData = (array) => {\n  array.forEach((object) => {\n    if (object.name || object.count) {\n      object[\"label\"] = capitalizeFirstLetter(object.name);\n      object[\"value\"] = object.count;\n    }\n  });\n  return {\n    type: \"column2d\",\n    width: 800,\n    height: 400,\n    dataFormat: \"json\",\n    dataSource: {\n      chart: {\n        caption: \"Stack Exchange\",\n        // subCaption: \"\",\n        xAxisName: \"Language\",\n        yAxisName: \"Counts\",\n        numberSuffix: \"K\",\n        theme: \"fusion\",\n      },\n      data: array,\n    },\n  };\n};\n\nfunction capitalizeFirstLetter(string) {\n  var b = string.split(\"-\");\n  let newString;\n  if (b === -1) {\n    newString = string;\n  } else {\n    let c = b.join(\" \");\n    newString = c;\n  }\n  return newString.charAt(0).toUpperCase() + newString.slice(1);\n}\n"]},"metadata":{},"sourceType":"module"}