{"ast":null,"code":"var _jsxFileName = \"/Users/embibe/Downloads/Devza/src/modules/Home/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./style.scss\";\nimport { bindActionCreators } from \"redux\";\nimport { geStackExchanegeData, getListOfUsers, getTaskLists, createTask } from \"./actions\";\nimport NavBar from \"../../components/NavBar\";\nimport { authenticateUserAction } from \"../Login/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport DragDrop from \"../../components/DragDrop/index\";\nimport CreateTaskModal from \"./Components/CreateTaskModal\";\nconst Container = styled.div`\n  margin-top: 100px;\n`;\nconst TopWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0% 10%;\n  @media (max-width: 840px) {\n    padding: 0% 5%;\n  }\n  @media (max-width: 720px) {\n    display: block;\n  }\n`;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const [modalVisble, setModalVisibility] = useState(false);\n  const [completeJsonForDisplay, setCompleteJsonForDisplay] = useState({});\n  const currentListOfUsers = useSelector(state => {\n    var _state$homeData;\n\n    return state === null || state === void 0 ? void 0 : (_state$homeData = state.homeData) === null || _state$homeData === void 0 ? void 0 : _state$homeData.listOfAllUsers;\n  });\n  useEffect(() => {\n    dispatch(getListOfUsers());\n    dispatch(getTaskLists());\n  }, []);\n\n  const onChangeDateTime = date => {\n    setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n      due_date: date\n    });\n  };\n\n  const modalEventHandler = type => {\n    if (type === \"enable\") return setModalVisibility(!modalVisble);else {\n      if (completeJsonForDisplay.due_date && Object.keys(completeJsonForDisplay.priority).length > 0 && Object.keys(completeJsonForDisplay.assigned_to).length > 0 && completeJsonForDisplay.message) {\n        const jsonCreation = {\n          message: completeJsonForDisplay.message,\n          due_date: completeJsonForDisplay.due_date,\n          priority: completeJsonForDisplay.priority.id,\n          assigned_to: completeJsonForDisplay.assigned_to.id\n        };\n        dispatch(createTask(jsonCreation)).then(response => {\n          var _response$data;\n\n          if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.status) === \"success\") {\n            modalEventHandler(\"enable\");\n            setCompleteJsonForDisplay({});\n            toastMessage(\"success\", \"Task successfully added.\");\n          }\n        });\n      } else {\n        toastMessage(\"error\", \"Please fill all detail\");\n      }\n    }\n  };\n\n  const toastMessage = (toastType, message) => {\n    toast[toastType](message, {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  };\n\n  const onChangeMessage = event => {\n    setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n      message: event.target.value\n    });\n  };\n\n  const hadleOnChangePriority = (selectedOption, type) => {\n    if (type === \"priority\") {\n      setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n        priority: selectedOption\n      });\n    } else {\n      setCompleteJsonForDisplay({ ...completeJsonForDisplay,\n        assigned_to: selectedOption\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => modalEventHandler(\"enable\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Create Task\"), /*#__PURE__*/React.createElement(DragDrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), modalVisble && /*#__PURE__*/React.createElement(CreateTaskModal, {\n    modalVisble: modalVisble,\n    modalEventHandler: modalEventHandler,\n    completeJsonForDisplay: completeJsonForDisplay,\n    onChangeDateTime: onChangeDateTime,\n    onChangeMessage: onChangeMessage,\n    hadleOnChangePriority: hadleOnChangePriority,\n    currentListOfUsers: currentListOfUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }))); // }\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/embibe/Downloads/Devza/src/modules/Home/index.js"],"names":["React","useEffect","useState","styled","bindActionCreators","geStackExchanegeData","getListOfUsers","getTaskLists","createTask","NavBar","authenticateUserAction","useDispatch","useSelector","toast","DragDrop","CreateTaskModal","Container","div","TopWrapper","Home","dispatch","modalVisble","setModalVisibility","completeJsonForDisplay","setCompleteJsonForDisplay","currentListOfUsers","state","homeData","listOfAllUsers","onChangeDateTime","date","due_date","modalEventHandler","type","Object","keys","priority","length","assigned_to","message","jsonCreation","id","then","response","data","status","toastMessage","toastType","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","onChangeMessage","event","target","value","hadleOnChangePriority","selectedOption"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./style.scss\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  geStackExchanegeData,\n  getListOfUsers,\n  getTaskLists,\n  createTask,\n} from \"./actions\";\nimport NavBar from \"../../components/NavBar\";\nimport { authenticateUserAction } from \"../Login/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport DragDrop from \"../../components/DragDrop/index\";\nimport CreateTaskModal from \"./Components/CreateTaskModal\";\n\nconst Container = styled.div`\n  margin-top: 100px;\n`;\n\nconst TopWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0% 10%;\n  @media (max-width: 840px) {\n    padding: 0% 5%;\n  }\n  @media (max-width: 720px) {\n    display: block;\n  }\n`;\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const [modalVisble, setModalVisibility] = useState(false);\n  const [completeJsonForDisplay, setCompleteJsonForDisplay] = useState({});\n\n  const currentListOfUsers = useSelector(\n    (state) => state?.homeData?.listOfAllUsers\n  );\n\n  useEffect(() => {\n    dispatch(getListOfUsers());\n    dispatch(getTaskLists());\n  }, []);\n\n  const onChangeDateTime = (date) => {\n    setCompleteJsonForDisplay({\n      ...completeJsonForDisplay,\n      due_date: date,\n    });\n  };\n\n  const modalEventHandler = (type) => {\n    if (type === \"enable\") return setModalVisibility(!modalVisble);\n    else {\n      if (\n        completeJsonForDisplay.due_date &&\n        Object.keys(completeJsonForDisplay.priority).length > 0 &&\n        Object.keys(completeJsonForDisplay.assigned_to).length > 0 &&\n        completeJsonForDisplay.message\n      ) {\n        const jsonCreation = {\n          message: completeJsonForDisplay.message,\n          due_date: completeJsonForDisplay.due_date,\n          priority: completeJsonForDisplay.priority.id,\n          assigned_to: completeJsonForDisplay.assigned_to.id,\n        };\n        dispatch(createTask(jsonCreation)).then((response) => {\n          if (response?.data?.status === \"success\") {\n            modalEventHandler(\"enable\");\n            setCompleteJsonForDisplay({});\n            toastMessage(\"success\", \"Task successfully added.\");\n          }\n        });\n      } else {\n        toastMessage(\"error\", \"Please fill all detail\");\n      }\n    }\n  };\n  const toastMessage = (toastType, message) => {\n    toast[toastType](message, {\n      position: \"top-right\",\n      autoClose: 1000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n  const onChangeMessage = (event) => {\n    setCompleteJsonForDisplay({\n      ...completeJsonForDisplay,\n      message: event.target.value,\n    });\n  };\n\n  const hadleOnChangePriority = (selectedOption, type) => {\n    if (type === \"priority\") {\n      setCompleteJsonForDisplay({\n        ...completeJsonForDisplay,\n        priority: selectedOption,\n      });\n    } else {\n      setCompleteJsonForDisplay({\n        ...completeJsonForDisplay,\n        assigned_to: selectedOption,\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Container>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => modalEventHandler(\"enable\")}\n        >\n          Create Task\n        </button>\n        <DragDrop />\n        {modalVisble && (\n          <CreateTaskModal\n            modalVisble={modalVisble}\n            modalEventHandler={modalEventHandler}\n            completeJsonForDisplay={completeJsonForDisplay}\n            onChangeDateTime={onChangeDateTime}\n            onChangeMessage={onChangeMessage}\n            hadleOnChangePriority={hadleOnChangePriority}\n            currentListOfUsers={currentListOfUsers}\n          />\n        )}\n      </Container>\n    </React.Fragment>\n  );\n  // }\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}